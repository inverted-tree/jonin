local asserts = require("src.assertions")
local utils = require("src.utils")

local function rules(targets)
	local rs = {}
	for _, target in ipairs(targets) do
		utils.join(rs, target.rules)
	end
	return rs
end

local function statements(targets)
	local stmts = {}
	for _, target in ipairs(targets) do
		utils.join(stmts, target.statements)
	end
	return stmts
end

local function phonyTargets(targets)
	local phony = "build all: phony"
	for _, target in ipairs(targets) do
		phony = phony .. " " .. "build/" .. target.name
	end
	return phony .. "\ndefault all\n"
end

return {
	writeFile = function(filename, targets)
		local file = io.open(filename, "w")
		asserts.isNotNil(file, string.format("Cannot open file %q", filename))

		file:write([[
# This Ninja file was generated by the jonin build system (https://github.com/inverted-tree/jonin).
# DO NOT EDIT THIS FILE, all changes will be overwritten!

]])

		for _, rule in ipairs(rules(targets)) do
			file:write(Rule.toString(rule) .. "\n")
		end
		file:write("\n")

		for _, stmt in ipairs(statements(targets)) do
			file:write(BuildStatement.toString(stmt))
		end
		file:write("\n")

		file:write(phonyTargets(targets))

		file:flush()
		file:close()
	end,
}
